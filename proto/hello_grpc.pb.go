// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingsServiceClient is the client API for GreetingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingsServiceClient interface {
	Greetings(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (*GreetingsResponse, error)
	GreetingsManyTimees(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (GreetingsService_GreetingsManyTimeesClient, error)
	LongBackGretings(ctx context.Context, opts ...grpc.CallOption) (GreetingsService_LongBackGretingsClient, error)
}

type greetingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingsServiceClient(cc grpc.ClientConnInterface) GreetingsServiceClient {
	return &greetingsServiceClient{cc}
}

func (c *greetingsServiceClient) Greetings(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (*GreetingsResponse, error) {
	out := new(GreetingsResponse)
	err := c.cc.Invoke(ctx, "/gRPCHellow.GreetingsService/Greetings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingsServiceClient) GreetingsManyTimees(ctx context.Context, in *GreetingsRequest, opts ...grpc.CallOption) (GreetingsService_GreetingsManyTimeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingsService_ServiceDesc.Streams[0], "/gRPCHellow.GreetingsService/GreetingsManyTimees", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingsServiceGreetingsManyTimeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetingsService_GreetingsManyTimeesClient interface {
	Recv() (*GreetingsResponse, error)
	grpc.ClientStream
}

type greetingsServiceGreetingsManyTimeesClient struct {
	grpc.ClientStream
}

func (x *greetingsServiceGreetingsManyTimeesClient) Recv() (*GreetingsResponse, error) {
	m := new(GreetingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetingsServiceClient) LongBackGretings(ctx context.Context, opts ...grpc.CallOption) (GreetingsService_LongBackGretingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetingsService_ServiceDesc.Streams[1], "/gRPCHellow.GreetingsService/LongBackGretings", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingsServiceLongBackGretingsClient{stream}
	return x, nil
}

type GreetingsService_LongBackGretingsClient interface {
	Send(*GreetingsRequest) error
	CloseAndRecv() (*GreetingsResponse, error)
	grpc.ClientStream
}

type greetingsServiceLongBackGretingsClient struct {
	grpc.ClientStream
}

func (x *greetingsServiceLongBackGretingsClient) Send(m *GreetingsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetingsServiceLongBackGretingsClient) CloseAndRecv() (*GreetingsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingsServiceServer is the server API for GreetingsService service.
// All implementations must embed UnimplementedGreetingsServiceServer
// for forward compatibility
type GreetingsServiceServer interface {
	Greetings(context.Context, *GreetingsRequest) (*GreetingsResponse, error)
	GreetingsManyTimees(*GreetingsRequest, GreetingsService_GreetingsManyTimeesServer) error
	LongBackGretings(GreetingsService_LongBackGretingsServer) error
	mustEmbedUnimplementedGreetingsServiceServer()
}

// UnimplementedGreetingsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingsServiceServer struct {
}

func (UnimplementedGreetingsServiceServer) Greetings(context.Context, *GreetingsRequest) (*GreetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greetings not implemented")
}
func (UnimplementedGreetingsServiceServer) GreetingsManyTimees(*GreetingsRequest, GreetingsService_GreetingsManyTimeesServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetingsManyTimees not implemented")
}
func (UnimplementedGreetingsServiceServer) LongBackGretings(GreetingsService_LongBackGretingsServer) error {
	return status.Errorf(codes.Unimplemented, "method LongBackGretings not implemented")
}
func (UnimplementedGreetingsServiceServer) mustEmbedUnimplementedGreetingsServiceServer() {}

// UnsafeGreetingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingsServiceServer will
// result in compilation errors.
type UnsafeGreetingsServiceServer interface {
	mustEmbedUnimplementedGreetingsServiceServer()
}

func RegisterGreetingsServiceServer(s grpc.ServiceRegistrar, srv GreetingsServiceServer) {
	s.RegisterService(&GreetingsService_ServiceDesc, srv)
}

func _GreetingsService_Greetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingsServiceServer).Greetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCHellow.GreetingsService/Greetings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingsServiceServer).Greetings(ctx, req.(*GreetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetingsService_GreetingsManyTimees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingsServiceServer).GreetingsManyTimees(m, &greetingsServiceGreetingsManyTimeesServer{stream})
}

type GreetingsService_GreetingsManyTimeesServer interface {
	Send(*GreetingsResponse) error
	grpc.ServerStream
}

type greetingsServiceGreetingsManyTimeesServer struct {
	grpc.ServerStream
}

func (x *greetingsServiceGreetingsManyTimeesServer) Send(m *GreetingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetingsService_LongBackGretings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetingsServiceServer).LongBackGretings(&greetingsServiceLongBackGretingsServer{stream})
}

type GreetingsService_LongBackGretingsServer interface {
	SendAndClose(*GreetingsResponse) error
	Recv() (*GreetingsRequest, error)
	grpc.ServerStream
}

type greetingsServiceLongBackGretingsServer struct {
	grpc.ServerStream
}

func (x *greetingsServiceLongBackGretingsServer) SendAndClose(m *GreetingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetingsServiceLongBackGretingsServer) Recv() (*GreetingsRequest, error) {
	m := new(GreetingsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingsService_ServiceDesc is the grpc.ServiceDesc for GreetingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCHellow.GreetingsService",
	HandlerType: (*GreetingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greetings",
			Handler:    _GreetingsService_Greetings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetingsManyTimees",
			Handler:       _GreetingsService_GreetingsManyTimees_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LongBackGretings",
			Handler:       _GreetingsService_LongBackGretings_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
